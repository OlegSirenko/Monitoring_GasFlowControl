# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml


name: Build multiple platforms

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  job_1:
    name: Build executable
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4
      - name: Fetch ImGui submodule
        run: git submodule update --init --recursive libs/imgui
      - name: Setup SDL
        uses: libsdl-org/setup-sdl@v1

      - name: Install OpenGL libraries
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get install libgl1-mesa-dev
              sudo apt-get install libglfw3-dev
          else
              echo "$RUNNER_OS not supported. OpenGL install not used for $RUNNER_OS"
          fi
        shell: bash
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Windows executable
        uses: actions/upload-artifact@v4
        if: runner.os == 'Windows'
        with:
          name: Build artifacts for Windows
          path: ${{ steps.strings.outputs.build-output-dir }}/GasFlowControlMonitoringApp.exe
      - name: Linux executable
        uses: actions/upload-artifact@v4
        if: runner.os == 'Linux'
        with:
          name: Build artifacts for Linux
          path: ${{ steps.strings.outputs.build-output-dir }}/GasFlowControlMonitoringApp
#  job_2:
#    name: Build Installer
#    runs-on: windows-latest
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v4
#
#      - name: Add msbuild to PATH
#        uses: microsoft/setup-msbuild@v2
#
#      - name: Install WiX
#        run: dotnet tool install --global wix
#      - name: Build WiX on Windows x86
#        run: cd GasFlowControl\GasFlowControl && ls && wix build .\Package.wxs .\Folders.wxs .\Package.en-us.wxl .\MainComponents.wxs -arch x86 -out .\out\Setup_GasFlowControl_x86.msi
#      - name: Build WiX on Windows x64
#        run: cd GasFlowControl\GasFlowControl && ls && wix build .\Package.wxs .\Folders.wxs .\Package.en-us.wxl .\MainComponents.wxs -arch x64 -out .\out\Setup_GasFlowControl_x64.msi
#      - name: Upload a Build Artifact
#        uses: actions/upload-artifact@v4.3.6
#        with:
#          # Artifact name
#          name: Upload Installer artifact
#          # A file, directory or wildcard pattern that describes what to upload
#          path: |
#            ${{ github.workspace }}\GasFlowControl\GasFlowControl\out\Setup_GasFlowControl_x86.msi
#            ${{ github.workspace }}\GasFlowControl\GasFlowControl\out\Setup_GasFlowControl_x64.msi
#          # The desired behavior if no files are found using the provided path.
#          if-no-files-found: error # optional, default is warn
#          # Duration after which artifact will expire in days. 0 means using default retention.

