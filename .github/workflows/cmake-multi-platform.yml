name: Build multiple platforms

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  job_1:
    name: Build executable
    runs-on: ${{ matrix.os }}


    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04, windows-latest ]
        build_type: [ Release ]
        c_compiler: [ gcc, clang, cl ]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-20.04
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-20.04
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install OpenGL libraries
        run: |
            sudo apt-get install libgl1-mesa-dev
            sudo apt-get install libglfw3-dev 
            sudo apt install fuse
        shell: bash
        if: runner.os == 'Linux'

      - name: Setup SDL for Windows
        uses: libsdl-org/setup-sdl@main
        id: sdl
        with:
          install-linux-dependencies: true
          version: 2-latest
          version-sdl-image: 2-latest
          add-to-environment: true
          build-type: ${{ matrix.build_type }}
        if: runner.os == 'Windows'

      - name: Build and install SDL2 from source for Linux
        run: |
          git clone https://github.com/libsdl-org/SDL.git -b SDL2
          cd SDL
          mkdir build
          cd build
          ../configure
          make
          sudo make install
        shell: bash
        if: runner.os == 'Linux'

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/cmake-build-release" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Check the output of Windows
        run: ls  && ls cmake-build-release/Release
        if: runner.os == 'Windows'

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        if: runner.os == 'Windows'

      - name: Install WiX
        run: dotnet tool install --global wix
        if: runner.os == 'Windows'

      - name: Install Wix Extencion
        run: | 
          wix extension add -g WixToolset.VisualStudio.wixext 
          wix extension add --global WixToolset.BootstrapperApplications.wixext 
          wix extension add --global WixToolset.Util.wixext
        if: runner.os == 'Windows'

      - name: Build WiX on Windows x86
        run: cd Deploy/Installer_GasFlowControl/GasFlowControl/GasFlowControl && ls && wix build -ext WixToolset.VisualStudio.wixext .\Package.wxs .\Folders.wxs .\Package.en-us.wxl .\MainComponents.wxs -arch x86 -out .\out\Setup_GasFlowControl_x86.msi
        if: runner.os == 'Windows'

      - name: Build WiX on Windows x64
        run: cd Deploy/Installer_GasFlowControl/GasFlowControl/GasFlowControl && ls && wix build -ext WixToolset.VisualStudio.wixext .\Package.wxs .\Folders.wxs .\Package.en-us.wxl .\MainComponents.wxs -arch x64 -out .\out\Setup_GasFlowControl_x64.msi
        if: runner.os == 'Windows'

      - name: Build Wix bootstrapper
        run: cd Deploy/Installer_GasFlowControl/Bootstrap/ && ls && wix build -arch x86 -ext WixToolset.BootstrapperApplications.wixext -ext WixToolset.Util.wixext -src .\install_vc_redist.wxs -out Setup_GasFlowControl.exe && ls
        if: runner.os == 'Windows'

      - name: Upload a Windows Installer
        uses: actions/upload-artifact@v4.3.6
        with:
          # Artifact name
          name: Installers
          # A file, directory or wildcard pattern that describes what to upload
          path: |
#            ${{ github.workspace }}/Deploy/Installer_GasFlowControl/GasFlowControl/GasFlowControl/out/Setup_GasFlowControl_x86.msi
#            ${{ github.workspace }}/Deploy/Installer_GasFlowControl/GasFlowControl/GasFlowControl/out/Setup_GasFlowControl_x64.msi
            ${{ github.workspace }}/Deploy/Installer_GasFlowControl/Bootstrap/install_vc_redist.exe
          if-no-files-found: error # optional, default is warn
        if: runner.os == 'Windows'

      - name: Build AppImage
        run: cd ${{ github.workspace }}/Deploy/AppImage/ && chmod +x linuxdeploy-x86_64.AppImage &&./run.sh
        if: matrix.c_compiler == 'gcc'

      - name: Upload AppImage
        uses: actions/upload-artifact@v4.3.6
        with:
          name: AppImage
          path: |
            ${{ github.workspace }}/Deploy/AppImage/Gas_Flow_Control_Monitor-x86_64.AppImage
        if: matrix.c_compiler == 'gcc'